---

- name: Cursory variable check
  include_tasks: sanity.yml

- name: install ZFS ppa for bionic
  apt_repository:
    repo: ppa:jonathonf/zfs
  when: ansible_distribution == "Ubuntu" and ansible_distribution_release == "bionic" and zfs_pool is defined

- name: Install global dependencies
  apt:
    name: "{{ dependencies.global }}"
    state: latest
    update_cache: yes
    cache_valid_time: "{{ debian_cache_valid_time|default(7200) }}"

- name: check if already bootstrapped
  stat:
    path: "{{ dbstrp_mountpoint }}/root/.bootstrap_complete"
  register: _stat_mount

- set_fact:
    bootstrapped: "{{ _stat_mount.stat.exists }}"
    bootstrapped_in_chroot: "{{ _stat_mount.stat.exists }}"

- name: check if already bootstrapped
  stat:
    path: "/root/.bootstrap_complete"
  register: _stat_local

- set_fact:
    bootstrapped: "{{ _stat_local.stat.exists }}"
    bootstrapped_in_chroot: "{{ _stat_local.stat.exists }}"

- block:
    - name: print keys
      command: ssh-add -L
      delegate_to: localhost
      become: no
      changed_when: no
      register: _local_keys

    - fail:
        msg: "No keys in ssh-agent, please add your keys to the agent"
      when: _local_keys.stdout == ""

    - name: copy keys
      set_fact:
        dbstrp_ssh_keys: "{{ _local_keys.stdout_lines }}"

  delegate_to: localhost
  become: no
  when: dbstrp_ssh_keys is not defined

- block:
    - name: create list of target devices
      set_fact:
        _target_devices: "{{ _target_devices + [item.device] }}"
      with_items: "{{ layout }}"

    - name: wipe devices
      include_tasks: wipe.yml
      when: wipe|default('') == "ABSOLUTELY"

    - name: create mountpoint
      file:
        state: directory
        path: "{{ dbstrp_mountpoint }}"

    - name: setup bootstrap user
      user:
        name: debootstrap
        create_home: no
        home: "{{ dbstrp_mountpoint }}"
        shell: "/bin/bash"
        groups:
          - sudo
        uid: 65533

    - name: chroot user via ssh
      blockinfile:
        path: "/etc/ssh/sshd_config"
        state: present
        block: >
          Match user debootstrap
              ChrootDirectory {{ dbstrp_mountpoint }}
              AuthorizedKeysFile /tmp/authorized_keys
      register: _ssh_config

    - name: restart sshd
      service:
        name: ssh
        state: restarted
      when: _ssh_config.changed

    - name: set mountpoint
      set_fact:
        _tgt_root: "{{ dbstrp_mountpoint }}"
        _mktemp: None

    - name: Partition Devices
      include_tasks: partitions.yml

    - name: Create MD Devices
      include_tasks: md.yml

    - name: encrypt devices
      include_tasks: encryption.yml

    - name: Create logical volumes
      include_tasks: lvm.yml

    - name: Create filesystems
      include_tasks: fs.yml

    - name: Create and mount ZFS pools
      include_tasks: zfs.yml
      when: zfs_pool is defined and zfs_fs is defined

    - name: mount filesystems
      include_tasks: mount.yml

    - name: run bootstrap
      include_tasks: bootstrap.yml

    - name: configure system
      include_tasks: configure.yml

    - name: create bootstrap user on target
      command: >
        chroot {{ dbstrp_mountpoint }} useradd -m -U -u 65533 -G sudo -s /bin/bash debootstrap

    - name: create ssh directory for bootstrap user
      file:
        state: directory
        path: "{{ dbstrp_mountpoint }}/home/debootstrap/.ssh"
        owner: debootstrap

    - name: setup keys for bootstrap user
      authorized_key:
        key: "{{ item }}"
        path: "/tmp/authorized_keys"
        user: debootstrap
      with_items: "{{ dbstrp_ssh_keys }}"

    - name: mark as bootstrapped
      copy:
        dest: "/root/.bootstrap_complete"
        content: ""
        owner: root
        group: root
        mode: 0600

    - name: register bootstrapped fact
      set_fact:
        bootstrapped: yes

  when: not bootstrapped or wipe|default('') == "ABSOLUTELY"